---
- name: bootstrap to {{ ansible_user }}@{{ my_host }}
  hosts: localhost
  gather_facts: no

  tasks:
    - name: add target host
      ansible.builtin.add_host:
        hostname: "{{ my_host }}"
        ansible_ssh_host: "{{ my_host }}"
        ansible_become_method: doas

- name: vm provisioning
  hosts: all
  gather_facts: no

  tasks:
    - name: generate tfvars
      ansible.builtin.raw: echo "{{ tf_vars }}" > .auto.tfvars
      delegate_to: localhost

    - name: tofu plan
      ansible.builtin.raw: tofu plan -out 'plan'
      delegate_to: localhost
      register: tofu_plan
      changed_when: "'no changes' not in tofu_plan.stdout"

    - name: tofu apply plan
      ansible.builtin.raw: tofu apply plan
      delegate_to: localhost
      register: tofu_apply
      changed_when: "'3 added' in tofu_apply.stdout"

    - name: remove tfvars
      ansible.builtin.raw: rm -f tofu.tfvars
      delegate_to: localhost

    - name: waiting for {{ inventory_hostname }} to be ready
      wait_for:
        host: "{{ inventory_hostname }}"
        port: 22
        state: started
        delay: 5
        timeout: 60
      delegate_to: localhost

    - name: remove previous SSH key
      ansible.builtin.raw: ssh-keygen -f ~/.ssh/known_hosts -R {{Â inventory_hostname }}
      delegate_to: localhost
      register: key_removal
      changed_when: "'not found in' not in key_removal.stderr"

    - name: allow new SSH key
      ansible.builtin.raw: ssh-keyscan -H {{ inventory_hostname }} | grep ed25519 >> ~/.ssh/known_hosts
      delegate_to: localhost

    - name: root operations
      become: true
      block:
        - name: gather all facts of cloud init
          community.general.cloud_init_data_facts:
          register: result

        - name: wait for cloud init to finish
          community.general.cloud_init_data_facts:
            filter: status
          register: res
          until: "res.cloud_init_data_facts.status.v1.stage is defined and not res.cloud_init_data_facts.status.v1.stage"
          retries: 10
          delay: 5

        - name: disable SSH password authentication
          ansible.builtin.raw: sed -i -e 's/^#PasswordAuthentication.*/PasswordAuthentication no/g' /etc/ssh/sshd_config

        - name: restarting OpenSSH
          ansible.builtin.raw: rc-service sshd restart

        - name: unlock root account
          ansible.builtin.raw: usermod -U root

        - name: set root SSH key
          ansible.builtin.raw: cp /home/alpine/.ssh/authorized_keys /root/.ssh/authorized_keys

        - name: remove doas message
          ansible.builtin.raw: sed -i -e '/doas/,+1d' /etc/motd

        - name: remove doas
          ansible.builtin.raw: apk del --purge doas


- name: bootstrap to root@{{ my_host }}
  hosts: localhost
  gather_facts: no
  tasks:
    - name: add target host
      ansible.builtin.add_host:
        name: "{{ my_host }}"
        hostname: "{{ my_host }}"
        ansible_ssh_user: root
        ansible_ssh_host: "{{ my_host }}"

- name: serious business
  hosts: "{{ my_host }}"
  gather_facts: no
  tasks:
    - name: direct root operations
      block:
        - name: set username fact
          set_fact:
              username: root

        - name: disable IPv6
          ansible.builtin.raw: |
            echo "net.ipv6.conf.all.disable_ipv6 = 1" >> /etc/sysctl.conf;
            sysctl -p;

        - name: update index of available package(s)
          ansible.builtin.raw: apk update

        - name: check package(s) update(s)
          ansible.builtin.raw: apk version -l '<'
          changed_when: pkgs_output.stdout.splitlines()|length > 1
          failed_when: pkgs_output.stdout.splitlines()|length == 0
          register: pkgs_output

        - name: upgrading {{ pkgs_output.stdout.splitlines()|length - 1 }} package(s)
          ansible.builtin.raw: apk upgrade
          when: pkgs_output.stdout.splitlines()|length > 1

        - name: install tools
          ansible.builtin.raw: apk add --no-cache htop
