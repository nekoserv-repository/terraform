---
- name: bootstrap to {{ ansible_user }}@{{ my_host }}
  hosts: localhost
  gather_facts: no

  tasks:
    - name: add target host
      ansible.builtin.add_host:
        hostname: "{{ my_host }}"
        ansible_ssh_host: "{{ my_host }}"
        ansible_become_method: doas

- name: vm provisioning
  hosts: all
  gather_facts: no

  tasks:
    - name: generate tfvars
      ansible.builtin.raw: echo "{{ tf_vars }}" > terraform.tfvars
      delegate_to: localhost

    - name: terraform plan
      ansible.builtin.raw: terraform plan -out 'plan'
      delegate_to: localhost
      register: terraform_plan
      changed_when: "'no changes' not in terraform_plan.stdout"

    - name: terraform apply plan
      ansible.builtin.raw: terraform apply plan
      delegate_to: localhost
      register: terraform_apply
      changed_when: "'3 added' in terraform_apply.stdout"

    - name: remove tfvars
      ansible.builtin.raw: rm -f terraform.tfvars
      delegate_to: localhost

    - name: waiting for {{ inventory_hostname }} to be ready
      wait_for:
        host: "{{ inventory_hostname }}"
        port: 22
        state: started
        delay: 5
        timeout: 60
      delegate_to: localhost

    - name: remove previous SSH key
      ansible.builtin.raw: ssh-keygen -f ~/.ssh/known_hosts -R {{Â inventory_hostname }}
      delegate_to: localhost
      register: key_removal
      changed_when: "'not found in' not in key_removal.stderr"

    - name: allow new SSH key
      ansible.builtin.raw: ssh-keyscan -H {{ inventory_hostname }} | grep ed25519 >> ~/.ssh/known_hosts
      delegate_to: localhost

    - name: root operations
      become: true
      block:
        - name: gather all facts of cloud init
          community.general.cloud_init_data_facts:
          register: result

        - name: wait for cloud init to finish
          community.general.cloud_init_data_facts:
            filter: status
          register: res
          until: "res.cloud_init_data_facts.status.v1.stage is defined and not res.cloud_init_data_facts.status.v1.stage"
          retries: 10
          delay: 5

        - name: disable SSH password authentication
          ansible.builtin.raw: sed -i -e 's/^#PasswordAuthentication.*/PasswordAuthentication no/g' /etc/ssh/sshd_config

        - name: restarting OpenSSH
          ansible.builtin.raw: rc-service sshd restart

        - name: unlock root account
          ansible.builtin.raw: usermod -U root

        - name: set root SSH key
          ansible.builtin.raw: cp /home/alpine/.ssh/authorized_keys /root/.ssh/authorized_keys

        - name: remove doas message
          ansible.builtin.raw: sed -i -e '/doas/,+1d' /etc/motd

        - name: remove doas
          ansible.builtin.raw: apk del --purge doas


- name: bootstrap to root@{{ my_host }}
  hosts: localhost
  gather_facts: no
  tasks:
    - name: add target host
      ansible.builtin.add_host:
        name: "{{ my_host }}"
        hostname: "{{ my_host }}"
        ansible_ssh_user: root
        ansible_ssh_host: "{{ my_host }}"

- name: serious business
  hosts: "{{ my_host }}"
  gather_facts: no
  tasks:
    - name: direct root operations
      block:
        - name: set username fact
          set_fact:
              username: root

        - name: add IPv6 quotes and brackets
          ansible.builtin.raw:  echo {{ inventory_hostname }} | sed '0,/:/s/\(.*:.*\)/\1/'
          delegate_to: localhost
          register: ip_output

        - name: set hostname fact
          set_fact:
              hostname: "{{ ip_output.stdout.splitlines() }}"

        - name: disable router advertisements
          ansible.builtin.raw: |
            echo "    pre-up echo 0 > /proc/sys/net/ipv6/conf/eth0/accept_ra" >> /etc/network/interfaces;
            echo -e "net.ipv6.conf.all.accept_ra = 0\nnet.ipv6.conf.default.accept_ra = 0\n" >> /etc/sysctl.conf;
            sysctl -p;

        - name: disable IPv4 DNS stuff
          ansible.builtin.raw: |
            sed -i -e '/dns/ s/^#*/#/' /etc/network/interfaces

        - name: add IPv4
          ansible.builtin.raw: |
            echo "iface eth0 inet static" >> /etc/network/interfaces;
            echo "    address {{ ipv4 }}" >> /etc/network/interfaces;
            echo "    netmask {{ ipv4_nm }}" >> /etc/network/interfaces;
            echo "    gateway {{ ipv4_gw }}" >> /etc/network/interfaces;

        - name: cgroup stuff
          block:
            - name: enable cgroup v2 (unified)
              ansible.builtin.raw: sed -i -e 's/^#rc_cgroup_mode=.*/rc_cgroup_mode="unified"/g' /etc/rc.conf

            - name: enable cgroup controllers
              ansible.builtin.raw: sed -i -e 's/^#rc_controller_cgroups=.*/rc_controller_cgroups="YES"/g' /etc/rc.conf

            - name: add more cgroup controllers
              ansible.builtin.raw: sed -i -e 's/^#rc_cgroup_controllers=.*/rc_cgroup_controllers="cpuset cpu io memory hugetlb pids"/g' /etc/rc.conf

            - name: restart cgroups
              ansible.builtin.raw: service cgroups restart | cat

        - name: update index of available package(s)
          ansible.builtin.raw: apk update

        - name: check package(s) update(s)
          ansible.builtin.raw: apk version -l '<'
          changed_when: pkgs_output.stdout.splitlines()|length > 1
          failed_when: pkgs_output.stdout.splitlines()|length == 0
          register: pkgs_output

        - name: upgrading {{ pkgs_output.stdout.splitlines()|length - 1 }} package(s)
          ansible.builtin.raw: apk upgrade
          when: pkgs_output.stdout.splitlines()|length > 1

        - name: force reboot
          ansible.builtin.raw: reboot
          poll: 0
          ignore_errors: yes

        - name: waiting for {{ inventory_hostname }} to be ready
          wait_for:
            host: "{{ inventory_hostname }}"
            port: 22
            state: started
            delay: 5
            timeout: 60
          delegate_to: localhost
          become: false

        - name: install tools
          ansible.builtin.raw: apk add --no-cache curl htop sed

        - name: k3s - install
          ansible.builtin.raw: >
            export INSTALL_K3S_EXEC="server --flannel-ipv6-masq
              --cluster-cidr=2001:cafe:42::/56
              --service-cidr=2001:cafe:43::/112 --node-ip {{ my_host }}";
            curl -sfL https://get.k3s.io | sh -

        ## sqlite server
#        - name: k3s - install
#          ansible.builtin.raw: curl -sfL https://get.k3s.io | sh -

        ## etcd server
#        - name: k3s - install
#          ansible.builtin.raw: curl -sfL https://get.k3s.io | sh -s - server --cluster-init

        - name: k3s - wait configuration file to be present
          ansible.builtin.raw: while [ ! -f /etc/rancher/k3s/k3s.yaml ]; do sleep 1; done

        - name: k3s - get configuration
          ansible.builtin.raw: scp {{ username }}@{{ hostname }}:/etc/rancher/k3s/k3s.yaml .
          delegate_to: localhost
          changed_when: false

        - name: k3s - update local configuration
          ansible.builtin.raw: |
            sed -i -e 's/127.0.0.1/{{ inventory_hostname }}/g' k3s.yaml;
            sed -i -e 's/\[::1\]/{{ hostname }}/g' k3s.yaml
          delegate_to: localhost
          changed_when: false

        - name: k3s - copy config to home
          ansible.builtin.raw: |
            mkdir -p ~/.kube;
            cp /etc/rancher/k3s/k3s.yaml $HOME/.kube/config;
            chmod 0600 ~/.kube/config;

        - name: k3s - wait for pods to be ready
          ansible.builtin.raw: while [ $(kubectl get po -n kube-system | grep Running | wc -l) != 5 ]; do sleep 1; done

        - name: k3s - set garbage collection limits
          ansible.builtin.raw: scp config.yaml {{ username }}@{{ hostname }}:/etc/rancher/k3s/config.yaml
          delegate_to: localhost
          changed_when: false

        - name: k3s - restart
          ansible.builtin.raw: service k3s restart

#        - name: install helm
#          ansible.builtin.raw: apk add --no-cache helm

        - name: remove tools
          ansible.builtin.raw: apk del --purge curl sed
