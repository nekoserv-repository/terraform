---
- name: bootstrap to {{ my_host }}
  hosts: localhost
  gather_facts: no

  tasks:
    - name: add target host
      ansible.builtin.add_host:
        hostname: "{{ my_host }}"
        ansible_ssh_host: "{{ my_host }}"
        ansible_become_method: doas

- name: vm provisioning
  hosts: all
  gather_facts: no

  tasks:
    - name: generate tfvars
      ansible.builtin.raw: echo "{{ tf_vars }}" > terraform.tfvars
      delegate_to: localhost

    - name: terraform plan
      ansible.builtin.raw: terraform plan -out 'plan'
      delegate_to: localhost
      register: terraform_plan
      changed_when: "'no changes' not in terraform_plan.stdout"

    - name: terraform apply plan
      ansible.builtin.raw: terraform apply plan
      delegate_to: localhost
      register: terraform_apply
      changed_when: "'3 added' in terraform_apply.stdout"

    - name: remove tfvars
      ansible.builtin.raw: rm -f terraform.tfvars
      delegate_to: localhost

    - name: waiting for {{ inventory_hostname }} to be ready
      wait_for:
        host: "{{ inventory_hostname }}"
        port: 22
        state: started
        delay: 5
        timeout: 60
      delegate_to: localhost

    - name: remove previous SSH key
      ansible.builtin.raw: ssh-keygen -f ~/.ssh/known_hosts -R {{Â inventory_hostname }}
      delegate_to: localhost
      register: key_removal
      changed_when: "'not found in' not in key_removal.stderr"

    - name: allow new SSH key
      ansible.builtin.raw: ssh-keyscan -H {{ inventory_hostname }} | grep ed25519 >> ~/.ssh/known_hosts
      delegate_to: localhost

    - name: root operations
      become: true
      block:
        - name: gather all facts of cloud init
          community.general.cloud_init_data_facts:
          register: result

        - name: wait for cloud init to finish
          community.general.cloud_init_data_facts:
            filter: status
          register: res
          until: "res.cloud_init_data_facts.status.v1.stage is defined and not res.cloud_init_data_facts.status.v1.stage"
          retries: 10
          delay: 5

        - name: disable SSH password authentication
          ansible.builtin.raw: sed -i -e 's/^#PasswordAuthentication.*/PasswordAuthentication no/g' /etc/ssh/sshd_config

        - name: restarting OpenSSH
          ansible.builtin.raw: rc-service sshd restart

#        - name: enable cgroups v2
#          ansible.builtin.raw: sed -i -e 's/^#rc_cgroup_mode=.*/rc_cgroup_mode="unified"/g' /etc/rc.conf
#
#        - name: restart cgroups
#          ansible.builtin.raw: service cgroups restart | cat

        - name: update index of available package(s)
          ansible.builtin.raw: apk update

        - name: check package(s) update(s)
          ansible.builtin.raw: apk version -l '<'
          changed_when: pkgs_output.stdout.splitlines()|length > 1
          failed_when: pkgs_output.stdout.splitlines()|length == 0
          register: pkgs_output

        - name: upgrading {{ pkgs_output.stdout.splitlines()|length - 1 }} package(s)
          ansible.builtin.raw: apk upgrade
          when: pkgs_output.stdout.splitlines()|length > 1

        - name: check if reboot needed
          ansible.builtin.raw: lsof / 2>&1 | awk '$3=="(deleted)"' | cat
          register: lsof_output

        - name: reboot
          ansible.builtin.raw: reboot
          poll: 0
          ignore_errors: yes
          when: lsof_output.stdout.splitlines()|length > 0

        - name: waiting for {{ inventory_hostname }} to be ready
          wait_for:
            host: "{{ inventory_hostname }}"
            port: 22
            state: started
            delay: 5
            timeout: 60
          delegate_to: localhost
          become: false
          when: lsof_output.stdout.splitlines()|length > 0

        - name: install some tools
          ansible.builtin.raw: apk add --no-cache htop

        - name: install docker
          ansible.builtin.raw: apk add --no-cache docker

        - name: add user to docker
          ansible.builtin.raw: usermod -aG docker {{ ansible_user }}

        - name: install docker-compose
          ansible.builtin.raw: apk add --no-cache docker-compose

        - name: restarting docker
          ansible.builtin.raw: rc-service docker restart

        - name: docker on default runlevel
          ansible.builtin.raw: rc-update add docker default

    - name: reconnect to reload groups
      meta: reset_connection

    - name: put docker-compose.yml
      ansible.builtin.raw: echo -e "version\x3A '3.8'\n\n\nservices\x3A\n  woodpecker-server\x3A\n    image\x3A woodpeckerci/woodpecker-server\x3Alatest\n    container_name\x3A woodpecker-server\n    restart\x3A always\n    ports\x3A\n      - 8000\x3A8000\n    volumes\x3A\n      - woodpecker-server-data\x3A/var/lib/woodpecker/\n    environment\x3A\n      - WOODPECKER_ADMIN=\${WOODPECKER_ADMIN}\n      - WOODPECKER_AGENT_SECRET=\${WOODPECKER_AGENT_SECRET}\n      - WOODPECKER_GITEA=true\n      - WOODPECKER_GITEA_CLIENT=\${WOODPECKER_GITEA_CLIENT}\n      - WOODPECKER_GITEA_SECRET=\${WOODPECKER_GITEA_SECRET}\n      - WOODPECKER_GITEA_SKIP_VERIFY=true\n      - WOODPECKER_GITEA_URL=\${WOODPECKER_GITEA_URL}\n      - WOODPECKER_HOST=\${WOODPECKER_HOST}\n      - WOODPECKER_OPEN=false\n\n\n  woodpecker-agent\x3A\n    image\x3A woodpeckerci/woodpecker-agent\x3Alatest\n    container_name\x3A woodpecker-agent\n    command\x3A agent\n    restart\x3A always\n    depends_on\x3A\n      - woodpecker-server\n    volumes\x3A\n      - woodpecker-agent-config\x3A/etc/woodpecker\n      - /var/run/docker.sock\x3A/var/run/docker.sock\n    environment\x3A\n      - WOODPECKER_AGENT_SECRET=\${WOODPECKER_AGENT_SECRET}\n      - WOODPECKER_SERVER=woodpecker-server\x3A9000\n\n\nvolumes\x3A\n  woodpecker-server-data\x3A\n  woodpecker-agent-config\x3A" > docker-compose.yml

    - name: put .env
      ansible.builtin.raw: echo -e "WOODPECKER_ADMIN={{ woodpecker_admin }}\nWOODPECKER_HOST=https://{{ ci_host }}:{{ ci_port }}\nWOODPECKER_GITEA_URL=https://{{ ci_host }}:{{ ci_port }}/git/\nWOODPECKER_GITEA_CLIENT={{ git_client }}\nWOODPECKER_GITEA_SECRET={{ git_secret }}\nWOODPECKER_AGENT_SECRET=$(tr -dc a-z0-9 </dev/urandom | head -c64)" > .env

    - name: set chmod
      ansible.builtin.raw: chmod 0600 docker-compose.yml .env

    - name: starting services...
      ansible.builtin.raw: docker-compose up -d
